; ezOS CP/M (c) Kroc Camen 2023, MIT License
; Pling! assembler
;
; ASCII codes for various built-in symbols:
;
ASC_COMMENT             = '#'
ASC_STRING              = '"'
ASC_HEX                 = '$'
ASC_BIN                 = '%'
ASC_LAMBDA_OPEN         = ':'
ASC_LAMBDA_CLOSE        = ';'
ASC_EXPR_OPEN           = '('
ASC_EXPR_CLOSE          = ')'
ASC_LIST_OPEN           = '['
ASC_LIST_CLOSE          = ']'
ASC_OP_EQU              = '='
ASC_OP_LT               = '<'
ASC_OP_GT               = '>'
ASC_OP_ADD              = '+'
ASC_OP_SUB              = '-'
ASC_OP_MUL              = '*'
ASC_OP_DIV              = '/'
ASC_OP_POW              = '^'
ASC_OP_MOD              = '%'
ASC_OP_OR               = '|'
ASC_OP_AND              = '&'
ASC_OP_XOR              = '~'
ASC_OP_AT               = '@'
ASC_POP                 = '!'
ASC_PEEK                = '?'

; tokens:
;-------------------------------------------------------------------------------
; TODO: this needs to be recursive because if a Pling! file imports another
;       that isn't assembled yet, it needs to assemble that one too
;
row:                    .WORD $0000     ; current line-number in file
col:                    .BYTE $00       ; current column-number in file
char:                   .BYTE $00       ; current character

token_row:              .WORD $0000     ; line-number at start of token
token_col:              .BYTE $00       ; column-number at start of token
token_char:             .BYTE $00       ; first character of token

.ENUMID 0
.ENUMID TKN_EOF                         ; end-of-file / no-token

; make the token IDs for the single-character symbols the same as their
; ASCII codes! (token IDs are opaque and never exposed to the developer)
; 
TKN_COMMENT             = ASC_COMMENT   ; (not actually used)
TKN_STRING              = ASC_STRING    ; a single-quote still opens a string
TKN_LAMBDA_OPEN         = ASC_LAMBDA_OPEN
TKN_LAMBDA_CLOSE        = ASC_LAMBDA_CLOSE
TKN_EXPR_OPEN           = ASC_EXPR_OPEN
TKN_EXPR_CLOSE          = ASC_EXPR_CLOSE
TKN_LIST_OPEN           = ASC_LIST_OPEN
TKN_LIST_CLOSE          = ASC_LIST_CLOSE
TKN_OP_EQUALS           = ASC_OP_EQU
TKN_OP_ADD              = ASC_OP_ADD
TKN_OP_SUBTRACT         = ASC_OP_SUB    ; not minus!
TKN_OP_MULTIPLY         = ASC_OP_MUL
TKN_OP_DIVIDE           = ASC_OP_DIV
TKN_OP_POWER            = ASC_OP_POW
TKN_OP_MODULO           = ASC_OP_MOD
TKN_OP_BITOR            = ASC_OP_OR
TKN_OP_BITAND           = ASC_OP_AND
TKN_OP_BITXOR           = ASC_OP_XOR
TKN_OP_AT               = ASC_OP_AT
TKN_POP                 = ASC_POP
TKN_PEEK                = ASC_PEEK

.ENUMID 128
.ENUMID TKN_NUMBER                      ; a number literal (any kind)
.ENUMID TKN_FUNCTION                    ; a function name
.ENUMID TKN_KEYWORD_FN                  ; the "fn" keyword
.ENUMID TKN_KEYWORD_LET                 ; the "let" keyword
.ENUMID TKN_KEYWORD_VAR                 ; the "var" keyword
.ENUMID TKN_KEYWORD_SET                 ; the "set" keyword
.ENUMID TKN_KEYWORD_GET                 ; the "get" keyword
.ENUMID TKN_OP_GTE                      ; the ">=" operator
.ENUMID TKN_OP_LTE                      ; the "<=" operator
.ENUMID TKN_OP_OR                       ; the logical "or" operator

; words:
;-------------------------------------------------------------------------------
.ENUMID 1
.ENUMID WORD_STRING                     ; string literal
.ENUMID WORD_INTEGER                    ; integer literal

.STRUCT Word
        type            BYTE            ; word type, `WORD_*` const
        data_ptr        WORD            ; data-pointer
        next_ptr        WORD            ; next-pointer (next word in list)
        row             WORD            ; line-number
        col             BYTE            ; column-number
.ENDST


file:
;===============================================================================
; assembles a file:
;-------------------------------------------------------------------------------
        ; file is assumed already open; finding and verifying
        ; files exist is up to the frontend to handle first
        ;
        ld      HL,     [heap_addr]     ; get the current top of the heap


_parseRoot:
;===============================================================================
; assemble source code starting at the root scope.
; certain keywords are only allowed from the root scope, e.g. imports
;-------------------------------------------------------------------------------
        ; read a single token; the token type is returned in A
        ; and the token-string is written to the top of the heap (HL)
        call    _getToken

        ; function definitions can occur at the root scope
        cp      A,      TKN_KEYWORD_FN

;;        ld      HL,     [heap_addr]
;;        inc     HL
;;        ld      B,      C
;;        ld      C,      0
;;-       ld      A,      [HL]
;;        call    osPrintChar
;;        inc     HL
;;        djnz    -

        ret


_parseFn:
;===============================================================================
; parse a function definition, (`fn` keyword)
;-------------------------------------------------------------------------------
        ret


_getToken:
;===============================================================================
; reads the next token in the file and does some basic type identification:
;
; note that for literals this routine only checks the first couple of
; characters and doesn't do any token conversion into literals. keywords
; are indetified fully and anything else is assumed to be a function name
;
; in:   HL                              heap position
; out:  A                               token type as TKN_* constant
;                                       0 (TKN_EOF) for end-of-file
;       HL                              (preserved)
;       BC, IX                          (clobbered)
;-------------------------------------------------------------------------------
        ; read a token on to the heap:
        ;-----------------------------------------------------------------------
        ; read bytes from the file and split by whitespace
        ; (or by quote-marks for strings)
        ;
        ; HL is the address of the top of the heap; this won't be advanced
        ; and the heap pointer won't be updated. C returns the length of
        ; the token-string, excluding the terminator and this is mirrored
        ; in [HL] (the first byte). DE returns the hypothetical new
        ; top-of-heap and [DE] contains the terminator
        ;
@next:  call    _readToken              ; read bytes on to heap @ HL

        ; temp: print token
        push    BC
        push    HL
        push    AF
        inc     HL
        ld      B,      C
        ld      C,      0
-       ld      A,      [HL]
        call    osPrintChar
        inc     HL
        djnz    -
        ld      A,      ASCII_LF
        call    osPrintChar
        pop     AF
        pop     HL
        pop     BC

        ; identify token type:
        ;-----------------------------------------------------------------------
        ; strings are immediately identifiable regardless of length --
        ; a quote-mark followed by newline includes the newline in the string!
        ;
        cp      ASC_STRING              ; first character is quote-mark?
        ret     z                       ; TKN_STRING == ASC_STRING :)

        ; fast-track simple numbers; regardless of length (1 or more):
        ; a token that starts with 0-9 is *always* a number. this is not true
        ; of type-sigils as a binary number `%11111111` can be confused with
        ; the modulo operator `%` unless length is checked first
        ;
        cp      '0'                     ; >= "0"?
        jr      c,      +               ; (if not, not a number literal)
        cp      '9'+1                   ; but also <= "9"?
        jp      nc,     +               ; (if not, not a number literal)

        ld      A,      TKN_NUMBER      ; is a number literal
        ret

        ; check for length:
+       dec     C                       ; if 1, check for 0
        jr      nz,     @two            ; -> more than 1 character

        ; comments:
        ;-----------------------------------------------------------------------
        ; a comment requires the hashmark '#' to be standalone; a hash-prefixed
        ; word is still a valid token name, therefore we've first verified the
        ; token is only 1 character long
        ;
        cp      ASC_COMMENT             ; comment "#"?
        jr      nz,     @one            ; if not, skip comment handling

        ; check the terminator; if a line ends with a hashmark '#' then that
        ; also signals the end of the comment and we don't want to 'skip until
        ; end-of-line' as that would consume the *next* line!
        ;
        ld      A,      [DE]            ; get terminating character
        and     A                       ; (set flags!)
        ret     z                       ; if EOF, also return with TKN_EOF
        cp      ASCII_LF                ; "#\n"?
        jr      z,      @next           ; yes, jump back to top of routine!

        ; is comment. keep reading bytes until end-of-line/file
        ;
@skip:  call    _getChar                ; read a character
        and     A                       ; (set flags!)
        ret     z                       ; if EOF, also return with TKN_EOF
        cp      ASCII_LF                ; reached end-of-line yet?
        jr      nz,     @skip           ; no? keep reading chars

        jr      @next

        ; one-character tokens:
        ;-----------------------------------------------------------------------
        ; check for the following tokens:
        ;
        ;       #       :       ;       (       )       [       ]       =
        ;       <       >       +       -       *       /       ^       %
        ;       |       &       ~       @       !       ?
        ;
        ; TODO: could use a trie-like structure here which contains a character
        ; and an offset to the next character to check if successful
        ;
        ; TODO: use ASCII ranges for speeding this up?
        ;
@one:   cp      ASC_LAMBDA_OPEN         ; lambda ":"?
        ret     z                       ; (the token-type is the ASCII code!)
        cp      ASC_LAMBDA_CLOSE        ; lambda ";"?
        ret     z
        cp      ASC_EXPR_OPEN           ; expression "("?
        ret     z
        cp      ASC_EXPR_CLOSE          ; expression ")"?
        ret     z
        cp      ASC_LIST_OPEN           ; list "["?
        ret     z
        cp      ASC_LIST_CLOSE          ; list "]"?
        ret     z
        cp      ASC_OP_EQU              ; equals operator "="?
        ret     z
        cp      ASC_OP_LT               ; less-than operator "<"?
        ret     z
        cp      ASC_OP_GT               ; greater-than operator ">"?
        ret     z
        cp      ASC_OP_ADD              ; add operator "+"?
        ret     z
        cp      ASC_OP_SUB              ; subtract operator "-"?
        ret     z
        cp      ASC_OP_MUL              ; multiply operator "*"?
        ret     z
        cp      ASC_OP_DIV              ; divide operator "/"?
        ret     z
        cp      ASC_OP_POW              ; power (exponention) operator "^"?
        ret     z
        cp      ASC_OP_MOD              ; modulo operator "%"?
        ret     z
        cp      ASC_OP_OR               ; bitwise OR operator "|"?
        ret     z
        cp      ASC_OP_AND              ; bitwise AND operator "&"?
        ret     z
        cp      ASC_OP_XOR              ; bitwise XOR operator "~"?
        ret     z
        cp      ASC_OP_AT               ; index at operator "@"?
        ret     z
        cp      ASC_POP                 ; parameter pop "!"?
        ret     z
        cp      ASC_PEEK                ; parameter peek "?"?
        ret     z

        ; not a reseved 1-character symbol or number.
        ; since it cannot be a type-sigil, it has to be a user-symbol
        jr      @name

        ;-----------------------------------------------------------------------
        ; two-character tokens:
        ;-----------------------------------------------------------------------
        ; only at this point is it necessary to refer to the second-or-more
        ; character, so we need a pointer to the token-string (we want to
        ; preserve HL)
        ;
@two:   push    HL
        pop     IX

        dec     C                       ; decrement a second time
        jr      nz,     @three          ; -> more than 2 characters

        ; check for the following tokens:
        ;
        ;       fn      or      >=      <=      !=
        ;
        cp      'f'                     ; first character = "f"?
        jr      nz,     +
        ld      A,      [IX+2]          ; 0 = size byte, 1 = first character
        cp      'n'                     ; second character = "n"?
        jr      nz,     @name           ; if not "fn"; process as user-symbol

        ld      A,      TKN_KEYWORD_FN  ; return "fn" keyword
        ret

+       cp      'o'                     ; first character = "o"?
        jr      nz,     +
        ld      A,      [IX+2]          ; get second character
        cp      'r'                     ; second character = "r"?
        jr      nz,     @name           ; if not "or", process as user-symbol

        ld      A,      TKN_OP_OR
        ret                             ; return "or" operator

+       cp      ASC_OP_GT               ; first character = ">"?
        jr      nz,     +
        ld      A,      [IX+2]          ; get second character
        cp      ASC_OP_EQU              ; second character = "="?
        jr      nz,     @name           ; if not ">=", process as user-symbol

        ld      A,      TKN_OP_GTE      ; return ">=" operator
        ret

+       cp      ASC_OP_LT               ; first character = "<"?
        jr      nz,     +
        ld      A,      [IX+2]          ; get second character
        cp      ASC_OP_EQU              ; second character = "="?
        jr      nz,     @name           ; if not "<=", process as user-symbol

        ld      A,      TKN_OP_LTE      ; return "<=" operator
        ret

        ; not a reserved 2-character symbol,
        ; but could still have a type-sigil
+       jr      @sigil

        ;-----------------------------------------------------------------------
        ; three character tokens:
        ;-----------------------------------------------------------------------
        ; check for the following tokens:
        ;
        ;       let     var     set     get
        ;
@three: cp      'v'                     ; is the first character "v"?
        jr      nz,     +               ; if not, keep going
        ld      A,      TKN_KEYWORD_VAR ; return "var" keyword
        ret

        ; hint: is the second character "e"?
        ;
+       ex      AF,     AF'             ; preserve first character for a moment
        ld      A',     [IX+2]          ; get second character
        cp      'e'                     ; is it "e", as in "[lsg]et"?
        jr      nz,     ++              ; if not, cannot be any of those three
        ld      A',     [IX+3]          ; get third character
        cp      't'                     ; is it "t"?
        jr      nz,     ++              ; if not, cannot be any of those three

        ex      AF',    AF              ; return to first character

        cp      'l'                     ; is it "l" as in "let"?
        jr      nz,     +               ; if not try next keyword
        ld      A,      TKN_KEYWORD_LET ; if so, return keyword "let"
        ret

+       cp      's'                     ; is it "s" as in "set"?
        jr      nz,     +               ; if not try next keyword
        ld      A,      TKN_KEYWORD_SET ; if so, return keyword "set"
        ret

+       cp      'g'                     ; is it "g" as in "get"?
        jr      nz,     @sigil          ; if not, must be user-symbol

        ld      A,      TKN_KEYWORD_GET ; if so, return keyword "get"
        ret

++      ex      AF',    AF              ; return to first character

        ;-----------------------------------------------------------------------
        ; type-sigils, i.e. token prefixes
        ;-----------------------------------------------------------------------
@sigil: cp      ASC_HEX                 ; hexadecimal literal?
        jr      z,      @num
        cp      ASC_BIN                 ; binary literal?
        jr      z,      @num

@name:  ld      A,      TKN_FUNCTION
        ret
@num:   ld      A,      TKN_NUMBER
        ret


_readToken:
;===============================================================================
; reads the next token from the file:
;
; this routine does not convert tokens into literals,
; only identifies the boundaries of the token-string
;
; the token is pushed to the heap as a length-prefixed string.
; the terminator is included at the end, where DE is situated,
; (for identifiying whitespace vs end-of-line / end-of-file
; termination), but not counted as part of the length
;
;    ----+--------------------------------------------------------+---+
;    ... | length ¦ " ¦ H ¦ e ¦ l ¦ l ¦ o ¦   ¦ W ¦ o ¦ r ¦ l ¦ d | " |
;    ----+----------^---------------------------------------------+---+
;        |< HL    | A                 < C >                       |< DE
;
; in:   HL                              starting addr in heap
;
; out:  A                               first-character of token-string
;       C                               length of token, 0 = end of file!
;                                       (also stored in the first byte)
;       DE                              next free heap address, containing
;                                       the terminating character, i.e.
;                                       whitespace, end-of-line or end-of-file
;       HL                              (preserved)
;       B, IX/Y                         (undefined)
;-------------------------------------------------------------------------------
        ld      C,     0                ; set starting length of token

        ; skip leading whitespace:
        ;-----------------------------------------------------------------------
@skip:  call    _getChar                ; read a character
        and     A                       ; (set flags!)
        ret     z                       ; return BC=0 for no word, end-of-file
        cp      ASCII_SPC+1             ; ignore any ASCII code <= $20 (spc)
        jr      c,      @skip           ; keep reading blank chars

        ; for error-messages, the row/column of the first character
        ; needs to be recorded for when the word-struct is created
        ;
        ld      DE,             [row]
        ld      [token_row],    DE
        ld      DE,             [col]   ; + `char`
        ld      [token_col],    DE      ; + `token_char`

        ; at least one valid character exists,
        ; begin a token-name string on the heap
        ;
        ld      D,      H               ; DE will be the moving
        ld      E,      L               ;  pointer in the heap
        inc     DE                      ; (skip over reserved byte)
        ld      [DE],   A               ; add the first character to the heap

        ; is it a string literal?
        ;
        ; strings are the only instance where a token does not stop
        ; at the next whitespace (comments are not handled here!)
        ;
        cp      $22                     ; start of string?
        jr      z,      @str            ; (strings are parsed differently)

        ; read token characters:
        ;-----------------------------------------------------------------------
@char:  ex      AF,     AF'             ; preserve first character
        ;-----------------------------------------------------------------------
-       inc     C                       ; increment character count
                                        ; TODO: overflow! (token too long)

        ; keep reading characters until the next whitespace or end-of-file:
        ; note that this has the side-effect of returning the terminating
        ; character in A, i.e. space, end-of-line or end-of-file!
        ;
        call    _getChar                ; read a character

        ; (note that the pre-increment of DE before writing will automatically
        ;  create the reserved byte at the start of the token-string)
        ;
        inc     DE                      ; move the data-pointer forward
        ld      [DE],   A'              ; add the character to the heap
        
        cp      ASCII_SPC+1             ; check for ASCII code > $20 (spc)
        jr      nc,     -               ; keep adding non-whitespace chars
        ;-----------------------------------------------------------------------
        ld      [HL],   C               ; write length to first byte
        ex      AF',    AF              ; return first character
        ret

        ; read a string literal token:
        ;-----------------------------------------------------------------------
        ; TODO: escape codes to be able to include " in strings
        ;
@str:   ex      AF,     AF'             ; preserve first character
        ;-----------------------------------------------------------------------
-       inc     C                       ; increment character count
                                        ; TODO: overflow! (token too long)
        call    _getChar                ; read a character
        inc     DE                      ; move the data-pointer forward
        ld      [DE],   A'              ; add the character to the heap
        cp      $22+1                   ; check for speech mark
        jr      nz,     -               ; keep adding string characters
        ;-----------------------------------------------------------------------
        ld      [HL],   C               ; write length to first byte
        ex      AF',    AF              ; return first character
        ret


_getChar:
;===============================================================================
; reads the next character in the file.
; current row and column are maintained
;
; TODO: handle tab (next 8th char boundary)
;
; out:  A                               ASCII code, 0 for end-of-file
;       DE, HL                          (preserved)
;       BC, IX/Y                        (undefined)
;-------------------------------------------------------------------------------
        call    osGetChar               ; read a char from file
        ld      [char], A               ; retain returned character

        ; if end-of-file, return the null byte;
        ; the caller will fold
        and     A                       ; (set flags)
        ret     z                       ; return on null byte

        ; check for end of line:
        ;-----------------------------------------------------------------------
        cp      ASCII_CR                ; /r is always ignored,
        jr      z,      __label__       ;  don't advance row/col, get next char

        exx                             ; must preserve HL & DE
        ld      HL',    col             ; prepare to increment column number

        cp      ASCII_LF                ; /n is newline
        jr      nz,     @col            ; if not, skip to next column

        ; increment line-number:
        ;-----------------------------------------------------------------------
        ld      DE',    [row]           ; 16-bit load,
        inc     DE'                     ;  and increment,
        ld      [row],  DE'             ;  and write
        ld      [HL'],  0               ; reset column number

        ; increment column number:
        ;-----------------------------------------------------------------------
        ; (capped at 255 even though lines can be longer)
@col:   inc     [HL']
        jr      nz,     +               ; if roll over, roll back (less
        dec     [HL']                   ;  instructions than read+add+write)

+       exx                             ; restore HL/DE
        ret


_eof:
;===============================================================================
        ld      C,      BDOS_PRNSTR
        ld      DE,     @str
        call    BDOS

        ret

@str:   .ASC "\nEnd of File$"


_pushWordNext:
;===============================================================================
; adds a word to the heap that points to the next position in the heap:
; (this is used for Lambdas and other nested words)
;
;    ----+----------------------------------------+
;    ... | type ¦ data-ptr ¦ next-ptr ¦ row ¦ col |
;    ----+------------+---------------------------+
;                     |                           ^
;                     '---------------------------'
;-------------------------------------------------------------------------------
        ; copy the temporary top of the heap to the data-pointer,
        ; and then add the length of a word-struct
        ;
        ld      H,      D
        ld      L,      E
        ld      BC,     _sizeof_Word
        add     HL,     BC

        ; fallthrough
        ; ...

_pushWord:
;===============================================================================
; adds a word to the heap:
;
; a word-structure is added to the top of the heap and partially populated
;
;    ----+----------------------------------------+
;    ... | type ¦ data-ptr ¦ next-ptr ¦ row ¦ col |
;    ----+----------------------------------------+
;
; in:   DE                              heap address to write word-struct
;       A                               word-type
;       HL                              data-pointer
;-------------------------------------------------------------------------------
        ; IX is now the address for the word-struct to come;
        ; we use IX because the struct has multiple fields
        ld      IXH,    D
        ld      IXL,    E
        ; populate the word-type
        ; (for the first byte, DE == IX+$00)
        ld      [DE],   A
        ; populate the data-pointer
        ld      [IX+Word.data_ptr+LO],  L
        ld      [IX+Word.data_ptr+HI],  H
        ; populate row (line-number) and column from the last read token
        ld      DE,     [token_row]
        ld      [IX+Word.row+LO],       E
        ld      [IX+Word.row+HI],       D
        ld      A,      [token_col]
        ld      [IX+Word.col],          A
        ; zero the next-pointer
        xor     A
        ld      [IX+Word.next_ptr+LO],  A
        ld      [IX+Word.next_ptr+HI],  A

        ret